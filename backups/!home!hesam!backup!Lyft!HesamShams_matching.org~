#+TITLE: Ride Matching - Lyft Challenge
#+AUTHOR: Hesam Shams
#+EMAIL: 
#+DATE: \today
#+OPTIONS:   H:5 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_CLASS: article
#+EXCLUDE_TAGS: NOEXPORT

* Latex Headers                                                    :NOEXPORT:
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
#+LATEX_HEADER: \usepackage[onehalfspacing]{setspace}
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \usepackage[tight,hang,nooneline,raggedright,figtopcap]{subfigure}
#+LATEX_HEADER: \usepackage{color}
#+LATEX_HEADER: \usepackage{multirow}
#+LATEX_HEADER: \usepackage{multicol}
#+LATEX_HEADER: \usepackage{amsfonts}
#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \usepackage{amsmath,amssymb}
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{multimedia}
#+LATEX_HEADER: \usepackage[boxed]{algorithm}
#+LATEX_HEADER: \usepackage{algorithmic}
#+LATEX_HEADER: \usepackage{natbib}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \usepackage{minted}

* Emacs Headers                                                    :NOEXPORT:
#+BEGIN_SRC emacs-lisp
  (require 'ox-latex)
  (setq org-latex-listings t)
  (setq org-latex-prefer-user-labels t)
  (add-to-list 'org-latex-packages-alist '("" "listings"))
  (add-to-list 'org-latex-packages-alist '("" "color"))

  (defun remove-orgmode-latex-labels1(text backend info)
     "Remove labels generated by org-mode"
     (replace-regexp-in-string 
        "\\\\label{sec:org\.*}" "" text)    
   )

   (defun remove-orgmode-latex-labels2(text backend info)
     "Remove labels generated by org-mode"
     (replace-regexp-in-string 
        "\\\\\(" "$" text)     
   )

   (defun remove-orgmode-latex-labels3(text backend info)
     (replace-regexp-in-string 
       "\\\\\)" "$" text)   
   )

  (add-hook 'org-export-latex-final-hook 'remove-orgmode-latex-labels)
   (add-to-list 'org-export-filter-final-output-functions
                    'remove-orgmode-latex-labels1)
   (add-to-list 'org-export-filter-final-output-functions
                    'remove-orgmode-latex-labels2)
   (add-to-list 'org-export-filter-final-output-functions
                    'remove-orgmode-latex-labels3)
#+END_SRC

#+RESULTS:
| remove-orgmode-latex-labels3 | remove-orgmode-latex-labels2 | remove-orgmode-latex-labels1 |

#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process  '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "bibtex %b"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

#+RESULTS:
| xelatex -shell-escape -interaction nonstopmode -output-directory %o %f | bibtex %b | xelatex -shell-escape -interaction nonstopmode -output-directory %o %f | xelatex -shell-escape -interaction nonstopmode -output-directory %o %f |

- set the size of the formulas when displayed inline in org
#+BEGIN_SRC emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 3.0))
#+end_src

#+RESULTS:
| :foreground | default | :background | default | :scale | 3.0 | :html-foreground | Black | :html-background | Transparent | :html-scale | 1.0 | :matchers | (begin $1 $ $$ \( \[) |

#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'guess-style-guess-tabs-mode)
   (add-hook 'python-mode-hook (lambda ()
                                    (guess-style-guess-tab-width)))
#+END_SRC

#+RESULTS:
| (lambda nil (guess-style-guess-tab-width)) | guess-style-guess-tabs-mode | wisent-python-default-setup |

- display inline images in org

#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images t)
(setq org-image-actual-width nil)
(org-redisplay-inline-images)
#+END_SRC

#+RESULTS:
: No images to display inline

- export code blocks
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-packages-alist '("" "minted")) (setq org-latex-listings 'minted)
#+END_SRC

#+RESULTS:
: minted

* Introduction
The problem of matching rides to minimize the total distance traveled in all matches can be considered in two different types of problem for different size of valid matches. We can see the problem of 2-matches as finding minimum weight perfect match of a graph in which each vertex is a request (ride) and the weight of each edge equals to the traveled distance of the match of regarding two vertices (requests). This helps to solve the problem in a smaller dimension and leads to less computations than a general model. First, calculate each possible pair which is in complexity of $O(n^2)$ and then find the minimum weight perfect match which can be done in a efficient heuristic. The 2-match problem is formulated and the solver is provided in the previous report as well as the coded solver. For the problem of 3-matches or more, it is more complicated than 2-match. We can see the problem as a special case of the capacitated vehicle routing problem (CVRP) with the constraint of pickup-drop off for each request. In order to solve the problem, I propose the following methods with the limitations for implementation, the solver, and the solution, if it is possible. The first approach is the exact solver with the mathematical formulation, the second solver is an approximation algorithm, and the final framework provides a solution in a inexpensive way which can be implemented on a large data and huge number of requests.

* Exact Solver
** Mathematical Formulation
The matching problem is finding ride matching up to $k$ rides in order to minimize the total traveled distances in all matches. The problem is similar to CVRP in which there exists a constraint to select pickup and drop off of a ride in a unique route. First, we need to calculate the distance of each two locations in pickup and drop off. This calculation requires a $2.n\times 2.n$ =for loop= computations which needs to be considered. The mathematical formulation of binary optimization model is as follows. The decision variables and parameters are defined in the followings. The request of $r_i$ is associated with pickup location $i$ and drop off location $i+n$.

\begin{table}[H]
\centering
\label{parameter}
\begin{tabular}{ll}
\multicolumn{2}{c}{Parameters}                                 \\ \hline
$n$              & Number of requests \\
$P$              & Set of pickup locations $\{1,2,\ldots,n\}$       \\
$D$              & Set of drop off locations $\{n+1,n+2,\ldots,2n\}$ \\
$w_{ij}$      & Distance between $i \in \{P\cup D\}$ and $j \in \{P\cup D\}$  \\
$c$              & The maximum allowable number of ride matching ($c \geq 3$) \\
$K$              & The maximum number of available cars (for unlimited $K = n$ )
\end{tabular}
\end{table}
We also set $U = \{P\cup D\}$ to make the formulation simple.
\begin{table}[H]
\centering
\label{parameter}
\begin{tabular}{ll}
\multicolumn{2}{c}{Decision Variables}                                 \\ \hline
\multirow{3}{*}{$x_{ij}^k}$              & Equals to \textbf{1} if the location $i \in \{P\cup D\}$ and $j \in \{P\cup D\}$ \\ 
 & is connected in the match $k$ \\
 & and equals to \textbf{zero} otherwise.
\end{tabular}
\end{table}

\begin{align}
\min{\sum_{k=1}^K \sum_{i \in U} \sum_{j \in U} w_{ij}.x_{ij}^k} && & && \label{obj}\\
\text{s.t.} && \sum_{i \in U} \sum_{j \in U} x_{ij}^k &\leq 2.c-1 && \forall k=\{1,\ldots, K\} \label{max:cap} \\
 && \sum_{k=1}^K \sum_{j \in U} x_{ij}^k &= 1 && \forall i \in P \label{all:satisfied} \\
 && \sum_{j \in U} x_{ij}^k &= \sum_{j \in U} x_{n+i,j}^k && \forall i \in P, \forall k=\{1,\ldots, K\} \label{pickup:dropoff} \\
 && \sum_{j \in U} x_{ij}^k &= \sum_{j \in U} x_{j,i}^k && \forall i \in U, \forall k=\{1,\ldots, K\} \label{flow:balance} \\
 && x_{ij}^k &\in \{0,1\} && \forall i,j \in U, \forall k=\{1,\ldots, K\} \nonumber
\end{align}

The (\ref{obj}) minimizes the total distances in all matches. In a match with $c$ rides, the number of total connection between locations is equal to $2.c-1$. To ensure that each match will not exceed the maximum allowable number of rides, the constraints set of (\ref{max:cap}) is proposed. The constraints set of (\ref{all:satisfied}) guarantees that all requests will be satisfied. The constraints set of (\ref{pickup:dropoff}) is incorporated with the constraint that if a match includes the pickup a specific request, then the drop off for that request must be assigned in that match and the pickup must be before the drop off. The constraints set of (\ref{flow:balance}) ensures the flow balance on each location.
** Complexity Analysis
Two following steps are required to obtain the optimal solution for the problem of finding minimum total distances in all matches. First we need to calculate distances between each of two locations in the dataset, including the pickup locations and drop off locations. If we have $n$ requests for ride, we need to calculate Manhattan distance between $2.n$ nodes. So, the we need to store $4.n^2$ distances and the complexity of this step is $O(n^2)$. The limitations of implementation of this step are the memory constraint of storing distances and the calculation, specially when the requests increase. The next step is solving the mixed integer programming which is clearly NP-hard, because the problem is a generalization of CVRP. This means that it is impossible to solve it in polynomial time.

Therefore, the main drawback of this approach is that it is impossible to find the optimal solution in a reasonable time. But finding the optimal solution for history data in expensive computations is beneficial. The benefit lies in using the history data in machine learning techniques to improve the performance of solver. Moreover, we need a commercial solver such as =CPLEX= and =Gurobi= to solve it which costs for the company. By the way, in the following section, I coded the exact solver in =Python= and =Gurobi= commercial solver with =Python=.

** Solver Codes
I have coded the exact solver in =Python= and =Gurobi= API in =Python= in jupyter. The file was named as =Exact.ipynb= and it needs to set the maximum allowable match $n$ before run the program. The results is saved into a CSV file which is called =n_matches.csv=. Each row in CSV file describe a single match which can be 2-match, 3-match, or $n$-match. It is not possible to run the program on a personal computer for the provided dataset because of memory constraint and the calculation time. But I tested the program on a reduced size of the dataset with first 50 requests and it took around 3 hours to solve on a PC with Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz and 8GiB memory RAM.
* Approximation Algorithm
Since it is not possible to solve the problem in a reasonable time, I designed a solver based on Tabu search algorithm for the problem. In the simplest form, the tabu search algorithm iteratively moves from one solution to another using the values of the corresponding objective values for guidance. Given a current solution $x$, at each iteration the algorithm moves to one of the solutions in its neighborhood $N(x)$, however the tabu search method prohibits some of the solutions in $N(x)$. Suppose that $latestChange(j)$ is the latest iteration when the solution component $j$ changed its value, then any solution in $N(x)$ that differs from $x$ in the component $j$ is prohibited until the iteration number $latestChange(j)+tenure$, where $tenure$ defines a length of the tabu period. There are many variations of tabu search implementations, but the idea is similar: prohibit changes in components that were recently modified. Typically, the best non-tabu solution in $N(x)$ is chosen as a next current solution, and after that the process repeats. Based on this, I provide a description of the *Tabu Algorithm* (see Algorithm \ref{FigDTA}).

\begin{algorithm}
\caption{Directional Tabu Algorithm (general scheme)} \label{FigDTA}
\begin{algorithmic}[1]
\REQUIRE  
\ENSURE \STATE $x^{best}=$construct random solution;
  \WHILE {stopping criterion =  FALSE} \label{main.cycle.start} 
   \STATE LocalSearch($x^{best}$)
   \STATE 
    \FOR {$nfail=0$ to $nfail^*$}\label{nfail.start}
      \STATE $x^{old}=x^{min}$ 
          \FOR{$k=0$ to $K$}        \label{temp.start}
            \STATE SearchProcedure($x,x^{min},D^1,D^0,f^1,f^0,niters,\theta_k,d$) [see Alg. \ref{FigTabu}]\label{temp.end}
         \ENDFOR
         \IF{$f(x^{old})>f(x^{min})$}
             \STATE $nfail=0$
         \ENDIF        
    \ENDFOR \label{chapter2:FigGES:nfail.end}
    \IF{$f(x^{best})>f(x^{min})$}
        \STATE $x^{best}=x^{min}$
    \ENDIF            
\ENDWHILE \label{main.cycle.end}
\RETURN $x^{best}$
\end{algorithmic}
\end{algorithm}

\begin{algorithm}
\caption{Tabu Search Procedure} \label{FigTabu}
\begin{algorithmic}[1]
\REQUIRE $x$ -- current solution, $x^{min}$ -- current best solution, $D^1$, $D^0$  -- long term memory data,  vectors $f^1, f^0$  [ $f^1_j$ ($f^0_j$) equals to the best found objective for the solution with the component $j$ equal to one (zero)], $\theta_k$ -- current temperature value, $niters$ -- maximum number of tabu iterations, $d$~-- number of iterations between memory updates.
    \STATE $\tilde{p}(\theta_k)$=\text{calculate probabilities}(${D^1},D^0,f^1,f^0, \theta_k$)$\quad\quad\quad\quad$\label{probability.generation} $\quad\quad$[see (\ref{approximation.probability})]    
    %\STATE $x_{best}=x$; $n=|x|$; $M=\{1,2,\ldots,n\}$; $step=0$;
    %$impr=$\bf{true}; $R=\emptyset$
    \STATE $lastChanged(j)=-\infty$; $tabu(j)=T^{L}$ for all $j$
    \FOR{$iter=1$ to $niters$}
            \STATE $TabuSet=\emptyset$ \label{init.tabu.set}
            \FOR{$y$ in $N(x)$}
                   \STATE $modInd = \{j: x_j\neq y_j\}$
                   \FOR{$j$ in $modInd$}
                        \IF{[$iter-lastChanged(j)<tabu(j)$] and [$f(y)\geq f(x_{min})$]} 
                        \STATE $TabuSet=TabuSet\cup y$
                        \ENDIF
                   \ENDFOR
            \ENDFOR
            \STATE $NonTabuSet= N(x)- TabuSet$
            \IF{$NonTabuSet\neq \emptyset$}
            \STATE $x^{new} = $ the best solution in $NonTabuSet$            
            \ELSE
            \STATE $x^{new} = $ the oldest tabu solution in $TabuSet$
            \ENDIF             \label{xnew.choosen}
            \STATE $modInd = \{j: x^{new}_j\neq x_j\}$ { \#only look at the components that changed}\label{who.changed}
            \FOR{$j$ in $modInd$}
            \IF{($x_j^{min}\neq x^{new}_j$)} 
            \STATE $tabu(j)=4(T^U-T^L) \tilde{p}_j(\theta)^2 -4(T^{U}-T^{L}) \tilde{p}_j(\theta)+T^{U} $  $\quad$[see (\ref{tenure.formula3})]
            \ELSE 
            \STATE $tabu(j)=T^{L}$ $\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad$[see (\ref{tenure.formula3})]\label{set.tabu2}
            \ENDIF
            \ENDFOR            
            \IF{[$iteration \bmod d = 0 $] OR [$f(x)<f(x^{min})$]} 
            \STATE update vectors $D^1$, $D^0$, $f^1$, $f^0$ using $x$             
            \ENDIF %    \ENDWHILE
            \STATE $x=x^{new}$
            \IF{[$f(x)<f(x^{min})$]} 
            \STATE $x^{min}=x$
            \ENDIF %    \ENDWHILE            
    \ENDFOR
    \RETURN $x,x^{min}$
\end{algorithmic}
\end{algorithm}
