//Standard headers 
#include <iostream>
#include <fstream>
#include <sstream>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <stdio.h>
#include <unistd.h>

using namespace std;

int no_ver, n;
int *visited;
int index_list=0;

void DFS(int *graph, long starting_node)
{
  if(index_list <= no_ver)
  {
    //cout << starting_node << "  ";
    index_list++;
    visited[starting_node] = 1;
    for(int i=0; i < 2*n; i++)
    {
      if(graph[i] == starting_node)
      { 
        if((i%2 == 0) && (visited[graph[i+1]]==0))
          DFS(graph,graph[i+1]);
        if((i%2 == 1) && (visited[graph[i-1]]==0))
          DFS(graph,graph[i-1]);
      }
    }
  }
}
int main(int argc, char **argv)
{
  cout<<"========================================================="<<endl<<endl;
  cout<<"Hesam Shams, hshams@vols.utk.edu, University of Tennessee"<<endl;
  cout<<endl<<"========================================================="<<endl;

  //Process command line argument
  char *file_name=NULL;//The file path for the adjancy matrix graph
  
  file_name = new char[strlen(argv[1])+1];
  strcpy(file_name,argv[1]);

  // Load problem
  ::ifstream inpfile;
  inpfile.open(file_name);
  int *graph;
  int v;
  inpfile >> no_ver;
  inpfile >> n;
  graph = new int[2*n];
  int i=0;
  while(inpfile >> graph[i])
  {
    i++;
  }


  //Mark all unexplored
  visited = new int[no_ver];

  for (int i = 0; i < no_ver; i++)
  {
    visited[i] = 0;
  }

  int no_comp = 0;
  for(int i = 0; i < no_ver; i++)
  {
    if(visited[i] == 0)
    {
      DFS(graph, i);
      no_comp++;
      //cout << endl;
    }
  }
  cout << no_comp << "\n";
}
