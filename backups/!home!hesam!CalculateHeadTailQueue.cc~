
double Tabu_v201301(COperation *oper,int &njobs,int &noper,int &maxswapsz,COperation **swapCands,
				 COperation** critics,int *szs,COperation** FQueue,
				 COperation** FQueue2,long queue_size,COperation** oper_order,
				 char *swap_id,COperation** oper_mach,long& CUR_ITERATION,
		    double &CMax,double &CMaxBest,double &CMaxTempBest,double &CMaxRecord,char* sol, char* record_sol, char* best_sol,long* tabu_moves,long tabu_tenure, long tabu_max_tenure,long niters, long& iteration,struct history_node** history_head1, struct history_node** history_tail1, int *history_length1,struct history_node** history_head0, struct history_node** history_tail0, int *history_length0,double *f0min, double *f1min, int &maxhistorylength,double* prob, CTrajectoryLogger* logger)
{
    long initial_tabu_tenure=tabu_tenure;

    time_t finish;    
    long row_size=((njobs*(njobs-1))/2);
    COperation* op;    
    
    // form current solution vector
    // op -- operation 
    // ind -- index corresponding to binary entry (job k, job j, on machine op->nmach)
    // oper_mach operation on machine op->nmach corresponding to job k.
    // op->position should be set for all entries...
    
    for(int i=0;i<noper*njobs;i++)
    {
	op=&oper[i];
	for(int k=op->job-1;k>=0;k--)// look for job indexes (k) smaller than op->job
	{
	    long ind=get_ind(k,op->job,op->nmach,row_size,njobs);
	    if(oper_mach[k*noper+op->nmach]->head<op->head) sol[ind]=1;
	    else sol[ind]=0;
	}
    }

    long *fmachines=new long[noper];//?
    long *fjobs=new long[njobs];//?
    long vector_size=njobs*(njobs-1)*noper/2;
    double CMaxNew=-1;
    
    bool improvement=true;

    //double ncriticals=0;
    int ilastcritical=0;
    int i=0;
    int nblocks=0;
    bool optimum=true;
    //int blocksize=0;
    //int nc=0;

    COperation* beforesecond=NULL;
    COperation* aftercurrent=NULL;

    //double reserve=0;
    //long nimprs=0;

    long nchoices=0;
    CMax=-1;

    // last_iteration_x_y -- when last time x,y where the choosen move
    long *last_iteration_x_y=new long[njobs*noper*njobs*noper];
    for(int i=0;i<njobs*noper*njobs*noper;i++) last_iteration_x_y[i]=0;
    // prev_span -- difference between previous iteration x,y was used and a new one...
    long prev_span=0;
    // number of iteration for which span has not changed (i.e. walking through the same sequence of steps)
    long cycle_length=0;

    
    
    while(iteration++<niters)
    {
	logger->cumulativeNiters=logger->cumulativeNiters+1;	

	improvement=false;
	CMax=0;
	ilastcritical=0;
	for(i=0;i<njobs;i++)
	{
	    CMax=max(CMax,oper[i*noper+noper-1].head+oper[i*noper+noper-1].processing);
	    if(CMax==oper[i*noper+noper-1].head+oper[i*noper+noper-1].processing)
		ilastcritical=i;
	}
	if(CMax<CMaxBest) CMaxBest=CMax; // CMaxBest correspond to the best so far

	//if(iteration%10000==0) cout<<"CMax="<<CMaxBest<<" "<<CMax<<" it="<<iteration<<" ";
	// Find all possible swaps (Grabowski-neighbourhood)
	int nswaps=0;	
	nchoices=DefineGrabowskiMoves2006(oper,noper,ilastcritical,optimum,nswaps,maxswapsz,swapCands,swap_id);
	
	/////////////////////////////////////////////////
	///            Making a swap
	/////////////////////////////////////////////////
	bool notFeasible;

	double best_nontabu=-1;//best non-tabu move quality
	int best_ind_nontabu=-1;


	double best_tabu=-1;//best tabu move quality
	long earliest_allowed_tabu=-1;
	int best_ind_tabu=-1;

	int old_age_tabu=-1;
	int old_ind_tabu=-1;

	int ntabu = 0;
	int nchecked = 0;

	while(nswaps>0)// scan through all solutions in the neighbourhood
	{
	    
	    long random_swap=urand_ind(nswaps);
	    notFeasible=false;
	    COperation* x=swapCands[2*random_swap];
	    COperation* y=swapCands[2*random_swap+1];
	    char move_id=swap_id[random_swap];
	    bool x_to_y=(swap_id[random_swap]==2)?true:false;



	    double est=-1;
	    //double est1=-1;
	    if(x->MS!=y)
	    {
		if(!IsFeasible2(x,y,FQueue,x_to_y,CUR_ITERATION))
		{
		    notFeasible=true;
		    //remove this move from the list and try anotherone
		    swapCands[2*random_swap]=swapCands[2*(nswaps-1)];
		    swapCands[2*(nswaps-1)]=x;
		    swapCands[2*random_swap+1]=swapCands[2*(nswaps-1)+1];
		    swapCands[2*(nswaps-1)+1]=y;
		    swap_id[random_swap]=swap_id[nswaps-1];
		    swap_id[nswaps-1]=move_id;
		    nswaps--;
		    continue;
		}
		//				est=CalculateMyEst(x,y,FQueue,x_to_y,CMax,oper,oper_order,njobs,noper,fjobs,fmachines);
		if(!x_to_y)
		{
		    est=CalculateMoveEstimationytox2(x,y,FQueue,0,CMax);
		}
		else
		{
		    est=CalculateMoveEstimationxtoy2(x,y,FQueue,0,CMax);
		}
		if(best_nontabu!=-1 && est>best_nontabu)// skip the solution if its estimate is worth than best_nontabu
		{
		    //remove this move from the list and try anotherone
		    swapCands[2*random_swap]=swapCands[2*(nswaps-1)];
		    swapCands[2*(nswaps-1)]=x;
		    swapCands[2*random_swap+1]=swapCands[2*(nswaps-1)+1];
		    swapCands[2*(nswaps-1)+1]=y;
		    swap_id[random_swap]=swap_id[nswaps-1];
		    swap_id[nswaps-1]=move_id;
		    nswaps--;
		    continue;
		}
	    }
	    else
	    {
		est=CalcTaillardEst(x,y,CMax,oper,oper_order,
				    njobs,noper,fjobs,fmachines,CUR_ITERATION);
		if(best_nontabu!=-1 && est>best_nontabu)// skip the solution if its estimate is worth than best_nontabu
		{
		    //remove this move from the list and try another one
		    swapCands[2*random_swap]=swapCands[2*(nswaps-1)];
		    swapCands[2*(nswaps-1)]=x;
		    swapCands[2*random_swap+1]=swapCands[2*(nswaps-1)+1];
		    swapCands[2*(nswaps-1)+1]=y;
		    swap_id[random_swap]=swap_id[nswaps-1];
		    swap_id[nswaps-1]=move_id;
		    nswaps--;
		    continue;
		}
	    }
	    beforesecond=y->MP;
	    aftercurrent=x->MS;

	    // when_allowed=0 if its allowed noe, otherwise its the # of iteration when allowed
	    int when_allowed =IsTabu_v201311(njobs,swapCands,swap_id,random_swap,tabu_moves,iteration,vector_size);
	    nchecked++;
	    if(when_allowed>0)
	    {
		ntabu++;
	    }
	    
		
	    //cout<<"tn:"<<nchecked<<"\t"<<ntabu<<endl;
	    // if(is_tabu)
            // {		
	    // 	swapCands[2*random_swap]=swapCands[2*(nswaps-1)];
	    // 	swapCands[2*(nswaps-1)]=x;
	    // 	swapCands[2*random_swap+1]=swapCands[2*(nswaps-1)+1];
	    // 	swapCands[2*(nswaps-1)+1]=y;
	    // 	swap_id[random_swap]=swap_id[nswaps-1];
	    // 	swap_id[nswaps-1]=move_id;
	    // 	nswaps--;
	    // 	continue;
            // }

	    // see the actual solution	    
	    update_queue_grab(FQueue,FQueue2,queue_size,x,y,njobs,noper,x_to_y,oper_order,CUR_ITERATION);

	    CMaxNew=0;
	    for(i=0;i<njobs;i++)
	    {
		CMaxNew=max(CMaxNew,oper[i*noper+noper-1].head+oper[i*noper+noper-1].processing);
	    }


	    // // calculate criticals...
	    // double ncriticals=CalcCriticalsFast(oper,njobs,noper,critics,szs);
// 	    long maxcritical = 100000;
// 	    if(ncriticals>maxcritical) 
// 	    {
// 	     	cout<<"Critical sum is more than maxcritical "<<ncriticals<<">"<<maxcritical<<endl;
// 	     	exit(0);
// 	    }
// 	    CMaxNew = CMaxNew + ncriticals/maxcritical;
// 	    CMaxNew = floor(CMaxNew*maxcritical)/maxcritical;
	    
	    if(when_allowed==0 && (best_nontabu==-1 || CMaxNew<best_nontabu))// not tabu and better than the best_nontabu -> mark it
	    {
		best_nontabu=CMaxNew;
		best_ind_nontabu=(nswaps-1);
	    }	    
	    else if(when_allowed>0 && CMaxNew<CMaxBest) /// ASPIRATION CRITERIA
	    {
		cout<<"ASPIRATION!! "<<CMaxNew<<" "<<CMaxBest<<endl;
		best_nontabu=CMaxNew;
		best_ind_nontabu=(nswaps-1);
	    }
	    else if(when_allowed>0) // tabu move
	    {
		if(earliest_allowed_tabu==-1 || earliest_allowed_tabu>when_allowed)
		{
		    earliest_allowed_tabu=when_allowed;
		    best_ind_tabu=(nswaps-1);
		}
	    }
	    // if(when_allowed>0 && (best_tabu==-1 || CMaxNew<best_tabu)) // tabu and better than best_tabu -> mark it
	    // {
	    // 	best_tabu=CMaxNew;
	    // 	best_ind_tabu=(nswaps-1);
	    // }

	    if(est>CMaxNew)
	    {
		cout<<est<<endl;
		cout<<CMaxNew<<endl;
		est=est;
		ofstream error_file;
		error_file.open("error_jsp.txt",ios::app);
		error_file<<"Error in est "<<est<<'\t'<<CMaxNew<<endl;
		error_file.close();
		cout<<"Error in est!!!"<<endl;exit(0);
	    }
	    // revert the changes
	    if(x_to_y) update_queue_grab(FQueue,FQueue2,queue_size, aftercurrent,x,njobs,noper,!x_to_y,oper_order,CUR_ITERATION);
	    else update_queue_grab(FQueue,FQueue2,queue_size, y,beforesecond,njobs,noper,!x_to_y,oper_order,CUR_ITERATION);

	    //remove this move from the list and try anotherone
	    swapCands[2*random_swap]=swapCands[2*(nswaps-1)];
	    swapCands[2*(nswaps-1)]=x;
	    swapCands[2*random_swap+1]=swapCands[2*(nswaps-1)+1];
	    swapCands[2*(nswaps-1)+1]=y;
	    swap_id[random_swap]=swap_id[nswaps-1];
	    swap_id[nswaps-1]=move_id;
	    nswaps--;

	    if(when_allowed==0 && CMaxNew<CMax) // stop scan if found an improvement...
	    {
	    //break;
	    }
	}//rof allswaps


	if( best_ind_nontabu==-1 && best_ind_tabu!=-1  )//use best tabu
	{
	    COperation* x=swapCands[2*best_ind_tabu];
	    COperation* y=swapCands[2*best_ind_tabu+1];

	    // What's an index? !!!!!!!!!!!!!!!!!!!!!!!!
	    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	    //long index_val=get_ind(x->job,y->job,x->nmach,row_size,njobs);
	    long j1=x->job;
	    long i1=x->op;
	    long j2=y->job;
	    long i2=y->op;
	    long ind1=j1*noper+i1;
	    long ind2=j2*noper+i2;
	    long combined_index = ind1*njobs*noper+ind2;    	    
	    
	    long span = iteration - last_iteration_x_y[combined_index];
	    if( span == prev_span)
	    {
		cycle_length++;
	    }
	    else 
	    {
		cycle_length = 0;
		prev_span = span;
	    }
	    last_iteration_x_y[combined_index]=iteration;
	    if(cycle_length > 500)
	    {
		cout<<"Cycle DETECTED!!!"<<endl;
		tabu_tenure+=1;
	    }
	    else
	    {
		tabu_tenure= initial_tabu_tenure;
	    }


	    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	    bool x_to_y=(swap_id[best_ind_tabu]==2)?true:false;

	    SetTabu_v201301( njobs,swapCands,swap_id, best_ind_tabu,tabu_moves, sol,best_sol, iteration,prob,tabu_tenure,tabu_max_tenure);

	    update_queue_grab(FQueue,FQueue2,queue_size,x,y,njobs,noper,x_to_y,oper_order,CUR_ITERATION);
	    // CMax is a new current solution
	    CMax=0;
	    for(i=0;i<njobs;i++)
	    {
		CMax=max(CMax,oper[i*noper+noper-1].head+oper[i*noper+noper-1].processing);
	    }


	    // calculate criticals...
	    // double ncriticals=CalcCriticalsFast(oper,njobs,noper,critics,szs);
// 	    long maxcritical = 100000;
// 	    if(ncriticals>maxcritical) 
// 	    {
// 	     	cout<<"Critical sum is more than maxcritical "<<ncriticals<<">"<<maxcritical<<endl;
// 	     	exit(0);
// 	    }
// 	    CMaxNew = CMaxNew + ncriticals/maxcritical;
// 	    CMaxNew = floor(CMaxNew*maxcritical)/maxcritical;

	    if(iteration%10000==0) cout<<"!!!tabu!!!-->transition to"<<CMaxNew<<" ";

	    // if(CMaxNew!=best_tabu)
	    // {
	    // 	cout<<"What's wrong! "<<CMaxNew<<"!="<<best_tabu<<endl;exit(0);
	    // }
	    //if(CMaxNew<CMax)
	    {

		//if(iteration%10000==0) cout<<" distance="<<distance<<endl;
		if(iteration%100==0 || CMax<CMaxBest)
		{		    
		    CMax=floor(CMaxNew);
		    long row_size=((njobs*(njobs-1))/2);
		    COperation* op;
		    long distance=0;
		    for(int i=0;i<noper*njobs;i++)
		    {
			op=&oper[i];
			for(int k=op->job-1;k>=0;k--)
			{
			    long ind=get_ind(k,op->job,op->nmach,row_size,njobs);
			    if(oper_mach[k*noper+op->nmach]->head<op->head)
				sol[ind]=1;
			    else sol[ind]=0;
			    if(sol[ind]!=best_sol[ind]) distance++;
			}
		    }
		    if(niters-iteration<1000)
		    {
			cout<<"Tabu move to "<<CMaxNew<<": Curent distance to "<<CMaxBest<<" is "<<distance<<endl;			   
		    }
		    update_record_best_etc(CMax,CMaxBest,CMaxTempBest,CMaxRecord,vector_size,sol,record_sol,best_sol);		
		    recalc_ges_params_history(CMax, sol, vector_size,history_head1,history_tail1, history_length1,history_head0,history_tail0,history_length0,f0min, f1min, maxhistorylength);
		    logger->logDataPoint(long(CMaxBest));
		}
	    }
	}
	// {
	//     //cout<<"empty best"<<endl;
	//     niters++;
	// }
	else
	{
	    
	    COperation* x=swapCands[2*best_ind_nontabu];
	    COperation* y=swapCands[2*best_ind_nontabu+1];
	    bool x_to_y=(swap_id[best_ind_nontabu]==2)?true:false;

	    // What's an index? !!!!!!!!!!!!!!!!!!!!!!!!
	    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	    
	    //long index_val=get_ind(x->job,y->job,x->nmach,row_size,njobs);

	    long j1=x->job;
	    long i1=x->op;
	    long j2=y->job;
	    long i2=y->op;
	    long ind1=j1*noper+i1;
	    long ind2=j2*noper+i2;
	    long combined_index = ind1*njobs*noper+ind2;    

	    long span = iteration - last_iteration_x_y[combined_index];
	    if( span == prev_span)
	    {
		cycle_length++;
	    }
	    else 
	    {
		cycle_length = 0;
		prev_span = span;
	    }
	    last_iteration_x_y[combined_index]=iteration;

	    if(cycle_length > 500)
	    {
		cout<<"Cycle DETECTED!!!"<<endl;
		tabu_tenure+=20;
	    }
	    else
	    {
		tabu_tenure= (tabu_tenure-1<initial_tabu_tenure)?initial_tabu_tenure:tabu_tenure-1;
	    }
	    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	    //cout<<"i="<<combined_index<<" "<<x->job<<" "<<y->job<<" "<<span<<" "<<" "<<iteration<<endl; 

	    int test_when_allowed =IsTabu_v201311(njobs,swapCands,swap_id,best_ind_nontabu,tabu_moves,iteration,vector_size);
	    //cout<<"when:"<<test_when_allowed<<endl;	  
	    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



	    SetTabu_v201301( njobs,swapCands,swap_id, best_ind_nontabu,tabu_moves,
			     sol,best_sol, iteration,prob,tabu_tenure, tabu_max_tenure);

	    update_queue_grab(FQueue,FQueue2,queue_size,x,y,njobs,
			      noper,x_to_y,oper_order,CUR_ITERATION);
	    CMax=0;
	    for(i=0;i<njobs;i++)
	    {
		CMax=max(CMax,oper[i*noper+noper-1].head+oper[i*noper+noper-1].processing);
	    }
	    //cout<<"non=tabu move "<<CMaxNew<<" "<<x->job<<" "<<y->job<<" cycle length = "<<cycle_length<<endl;


	    // calculate criticals...
	    // double ncriticals=CalcCriticalsFast(oper,njobs,noper,critics,szs);
// 	    long maxcritical = 100000;
// 	    if(ncriticals>maxcritical) 
// 	    {
// 	     	cout<<"Critical sum is more than maxcritical "<<ncriticals<<">"<<maxcritical<<endl;
// 	     	exit(0);
// 	    }
// 	    CMaxNew = CMaxNew + ncriticals/maxcritical;
// 	    CMaxNew = floor(CMaxNew*maxcritical)/maxcritical;

	    //if(iteration%10000==0) cout<<"transition to"<<CMaxNew<<" "<<endl;

	    if(CMax!=best_nontabu)
	    {
		cout<<"What's wrong! "<<CMax<<"!="<<best_nontabu<<endl;exit(0);
	    }
	    //if(CMaxNew<CMax)
	    {                
		//if(iteration%10000==0) cout<<" distance="<<distance<<endl;
		if(iteration%100==0 || CMax<CMaxBest)
		{

		    //CMax=floor(CMaxNew);
		    long row_size=((njobs*(njobs-1))/2);
		    COperation* op;
		    long distance=0;
		    for(int i=0;i<noper*njobs;i++)
		    {
			op=&oper[i];
			for(int k=op->job-1;k>=0;k--)
			{
			    long ind=get_ind(k,op->job,op->nmach,row_size,njobs);
			    //cout<<oper_mach[k*noper+op->nmach]->position_in_queue<<" "<<		    
			    //oper[i*noper+noper-1].head;//
                            if(oper_mach[k*noper+op->nmach]->head<op->head)
			     	sol[ind]=1;
			    else sol[ind]=0;

			    // if(oper_mach[k*noper+op->nmach]->position<op->position)
			    // 	sol[ind]=1;
			    // else sol[ind]=0;
			    if(sol[ind]!=best_sol[ind]) distance++;
			    //cout<<int(sol[ind])<<" "<<int(best_sol[ind])<<endl;
			}
		    }
		    if(niters-iteration<1000)
		    {
			cout<<"Move to "<<CMax<<":Curent distance to "<<CMaxBest<<" is "<<distance<<endl;			   
		    }
		    update_record_best_etc(CMax,CMaxBest,CMaxTempBest,CMaxRecord,vector_size,sol,record_sol,best_sol);		
		    recalc_ges_params_history(CMax, sol, vector_size,history_head1,history_tail1, history_length1,history_head0,history_tail0,history_length0,f0min, f1min, maxhistorylength);
		    logger->logDataPoint(long(CMaxBest));
		}
	    }
	}
    }

    delete [] fmachines;
    delete [] fjobs;
    delete [] last_iteration_x_y;
    return CMax;
}

